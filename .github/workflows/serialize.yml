---
name: Serialize

on:
  workflow_dispatch: {}
  workflow_call:
    inputs:
      query:
        description: "Cloudsmith query used to fetch package json data"
        required: false
        default: ""
        type: string
      org_repo:
        description: "GitHub org & repo combination used to find jsonata query file path"
        required: true
        type: string

defaults:
  run:
    shell: bash

env:
  PAGE_SIZE: 50

jobs:
  serialize:
    runs-on: ubuntu-latest
    name: Serialize Release Data
    steps:
      - name: Setup
        run: npm install --global jfq

      - name: Checkout
        uses: actions/checkout@v4

      # - name: Kong Mesh
      #   env:
      #     CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
      #     CLOUDSMITH_QUERY: >-
      #       name:^kong-mesh-linux-amd64$ AND
      #       repository:^kong-mesh-binaries-release$
      #     VERBOSE: ${{ runner.debug }}
      #   run: |
      #     [ -n "${VERBOSE:-}" ] && set -x

      #     mkdir -pv tmp/kong/kong-mesh

      #     # --get required for --data* flags to be query params
      #     # shellcheck disable=SC2086
      #     curl ${_V:-} --get --location --fail \
      #       -H 'accept: application/json' \
      #       -H "X-Api-Key: ${CLOUDSMITH_API_KEY}" \
      #       --data-urlencode "query=${CLOUDSMITH_QUERY}" \
      #       --data 'page=1' \
      #       --data "page_size=$PAGE_SIZE" \
      #       'https://api.cloudsmith.io/v1/packages/kong/' |
      #       jfq -q kong/kong-mesh/query.jsonata >tmp/kong/kong-mesh/releases.json

      - name: Serialize GitHub Data (deck)
        if: >-
          inputs.query == '' &&
          inputs.org_repo == 'kong/deck'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG_REPO: kong/deck
          VERBOSE: ${{ runner.debug }}
        run: |
          [ -n "${VERBOSE:-}" ] && set -x

          mkdir -pv "tmp/${ORG_REPO}"

          for v in $(gh api "repos/${ORG_REPO}/releases" --jq '.[]|.name'); do
            gh release download "$v" \
              -R kong/deck \
              -p checksums.txt \
              -O -;
          done |
            jq -R | \
            jq -s '[.[]|split("  ")|{"name": .[1], "digest": .[0]}]' \
              >${ORG_REPO#*/}_checksums.json

          gh api "repos/${ORG_REPO}/releases" >${ORG_REPO#*/}_releases.json

          jq \
            --slurp \
            '
            (
              .[0] as $sums |
              .[1][].assets[] |= (
                . as $assets |
                foreach $assets as $a (
                  {};
                  . + $a + (
                    $sums[] | select(.name == $a.name) as $sum |
                    if $sum then {"digest": $sum.digest} else {} end
                  )
                )
              )
            )[1]
            ' ${ORG_REPO#*/}_checksums.json ${ORG_REPO#*/}_releases.json \
              >"tmp/${ORG_REPO}/releases.json"

          if [ -n "${VERBOSE:-}" ]; then
            tail -n+1 ${ORG_REPO#*/}_*.json
          fi

      - name: Serialize GitHub Data
        if: >-
          inputs.query == '' &&
          inputs.org_repo != 'kong/deck'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG_REPO: ${{ inputs.org_repo }}
          VERBOSE: ${{ runner.debug }}
        run: |
          [ -n "${VERBOSE:-}" ] && set -x

          mkdir -pv "tmp/${ORG_REPO}"

          # --get required for --data* flags to be query params
          # shellcheck disable=SC2086
          curl ${_V:-} --get --location --fail \
            -H 'accept: application/json' \
            -H "X-Api-Key: ${CLOUDSMITH_API_KEY}" \
            --data-urlencode "query=${CLOUDSMITH_QUERY}" \
            --data 'page=1' \
            --data "page_size=${PAGE_SIZE}" \
            'https://api.cloudsmith.io/v1/packages/kong/' |
            jfq \
              -q "${ORG_REPO}/query.jsonata" \
                >"tmp/${ORG_REPO}/releases.json"

      - name: Serialize Cloudsmith Data
        if: inputs.query != ''
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
          CLOUDSMITH_QUERY: ${{ inputs.query }}
          ORG_REPO: ${{ inputs.org_repo }}
          VERBOSE: ${{ runner.debug }}
        run: |
          [ -n "${VERBOSE:-}" ] && set -x

          mkdir -pv "tmp/${ORG_REPO}"

          # --get required for --data* flags to be query params
          # shellcheck disable=SC2086
          curl ${_V:-} --get --location --fail \
            -H 'accept: application/json' \
            -H "X-Api-Key: ${CLOUDSMITH_API_KEY}" \
            --data-urlencode "query=${CLOUDSMITH_QUERY}" \
            --data 'page=1' \
            --data "page_size=${PAGE_SIZE}" \
            'https://api.cloudsmith.io/v1/packages/kong/' |
            jfq \
              -q "${ORG_REPO}/query.jsonata" \
              >"tmp/${ORG_REPO}/releases.json"

      # - name: Kong Gateway Enterprise
      #   env:
      #     CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
      #     CLOUDSMITH_QUERY: >-
      #       name:kong-enterprise-edition-fips AND
      #       distribution:el AND
      #       distribution:9 AND
      #       architecture:x86_64 AND
      #       repository:^gateway
      #     VERBOSE: ${{ runner.debug }}
      #   run: |
      #     [ -n "${VERBOSE:-}" ] && set -x

      #     mkdir -pv tmp/kong/kong-ee

      #     # --get required for --data* flags to be query params
      #     # shellcheck disable=SC2086
      #     curl ${_V:-} --get --location --fail \
      #       -H 'accept: application/json' \
      #       -H "X-Api-Key: ${CLOUDSMITH_API_KEY}" \
      #       --data-urlencode "query=${CLOUDSMITH_QUERY}" \
      #       --data 'page=1' \
      #       --data "page_size=$PAGE_SIZE" \
      #       'https://api.cloudsmith.io/v1/packages/kong/' |
      #       jfq -q kong/kong-ee/query.jsonata >tmp/kong/kong-ee/releases.json

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: artifacts
      #     path: tmp
